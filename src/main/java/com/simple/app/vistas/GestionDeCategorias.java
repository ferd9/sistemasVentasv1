/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.simple.app.vistas;

import com.simple.app.dao.CategoriaJpaController;
import com.simple.app.dao.exceptions.NonexistentEntityException;
import com.simple.app.modelo.Categoria;
import com.simple.app.vistas.custom.DeleteCellEditor;
import com.simple.app.vistas.custom.TableDeleteActionCellRender;
import com.simple.app.vistas.interfaces.TableActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lynkos
 */
public class GestionDeCategorias extends javax.swing.JInternalFrame {

    private Categoria categoriaActualizar= null;
    /**
     * Creates new form GestionDeCategorias
     */
    public GestionDeCategorias() {
        initComponents();
        this.cargarTablaCategorias();
        
        eventoSeleccionarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        btnCrear = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        scrollCategorias = new javax.swing.JScrollPane();
        tblCategorias = new javax.swing.JTable();

        setClosable(true);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Descripción:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel2.add(jLabel1, gridBagConstraints);

        txtDescripcion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDescripcionFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(txtDescripcion, gridBagConstraints);

        btnCrear.setText("Crear");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel2.add(btnCrear, gridBagConstraints);

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel2.add(btnActualizar, gridBagConstraints);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setLayout(new java.awt.BorderLayout());

        tblCategorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nro", "Descripción", "Estado"
            }
        ));
        tblCategorias.getTableHeader().setReorderingAllowed(false);
        scrollCategorias.setViewportView(tblCategorias);

        jPanel3.add(scrollCategorias, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        
        CategoriaJpaController categoriaJpaController = new CategoriaJpaController();
        Categoria categoria = new Categoria();

        if (this.txtDescripcion.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Complete  todos los campos");
            return;
        }
        
        if (categoriaJpaController.findCategoriaByDecripcion(txtDescripcion.getText().trim()) != null){
            JOptionPane.showMessageDialog(null, "La Categoria ya esta registrada en la Base de Datos");
            return;
        }
        
        categoria.setDescripcion(txtDescripcion.getText().trim());
        categoria.setEstado(1);

        try {
            categoriaJpaController = new CategoriaJpaController();
            categoriaJpaController.create(categoria);
        } catch (Exception ex) {
            Logger.getLogger(GestionDeCategorias.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (categoria.getIdCategoria() != null) {
            JOptionPane.showMessageDialog(null, "Registro Guardado");
            this.cargarTablaCategorias();
            //limpiar campo
            txtDescripcion.setText("");  
            return;
        } 
        
        JOptionPane.showMessageDialog(null, "Error al Guardar");
    }//GEN-LAST:event_btnCrearActionPerformed

    private void txtDescripcionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescripcionFocusGained
       this.tblCategorias.clearSelection();
    }//GEN-LAST:event_txtDescripcionFocusGained

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        
        if(categoriaActualizar == null){
            JOptionPane.showMessageDialog(null, "Seleccione una categoria");
            return;
        }
        CategoriaJpaController categoriaJpaController = new CategoriaJpaController();
        try {
            categoriaActualizar.setDescripcion(this.txtDescripcion.getText());
            categoriaJpaController.edit(categoriaActualizar);           
        } catch (Exception ex) {
            Logger.getLogger(GestionDeCategorias.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            categoriaJpaController.close();
        }
        //categoriaActualizar = null;
        this.txtDescripcion.setText("");
        cargarTablaCategorias();
    }//GEN-LAST:event_btnActualizarActionPerformed

        /*
     * *****************************************************
     * metodo para mostrar todos las categorias registradas
     * *****************************************************
     */
    private void cargarTablaCategorias() {
        
        
        this.categoriaActualizar = null;
        
        
        CategoriaJpaController categoriaJpaController = new CategoriaJpaController();
        List<Categoria> categorias = categoriaJpaController.findCategoriaEntities();
        System.out.println("Nro Categorias: "+categorias.size());
        DefaultTableModel model = new DefaultTableModel();
        this.tblCategorias = new JTable(model);
        this.scrollCategorias.setViewportView(this.tblCategorias);
        model.addColumn("idCategoria");
        model.addColumn("descripcion");
        model.addColumn("estado");
        model.addColumn("Borrar");
        
        categorias.forEach((Categoria categoria)->{
            Object fila[] = new Object[3];
            fila[0] = categoria.getIdCategoria();
            fila[1] = categoria.getDescripcion();
            fila[2] = categoria.getEstado();
            
            model.addRow(fila);
        });
        
        categoriaJpaController.close();        
          
        
               
        TableActionEvent tableActionEvent = new TableActionEvent() {
            @Override
            public void onEdit(int row) {
                //sin inplementacion               
            }

            @Override
            public void onDelete(int row) {
                System.out.println(row);
                
                String[] options = { "Eliminar", "Cancelar"};
                int response = JOptionPane.showOptionDialog(null, "¿Esta seguro de eliminar la categoria seleccionada?", null, 
                                            JOptionPane.DEFAULT_OPTION, 
                                            JOptionPane.WARNING_MESSAGE, 
                                            null, options, null);
                if(response == 0){
                    int idCategoria = (int) tblCategorias.getModel().getValueAt(row, 0);
                   // eliminarUsuario(idUsuario);
                   deleteCategoria(idCategoria);
                    cargarTablaCategorias();
                }
                
            }

            @Override
            public void onView(int row) {
                System.out.println(row);
            }
        };
        tblCategorias.setRowHeight(35);
        tblCategorias.getColumnModel().getColumn(3).setCellRenderer(new TableDeleteActionCellRender());
        tblCategorias.getColumnModel().getColumn(3).setCellEditor(new DeleteCellEditor(tableActionEvent));
        eventoSeleccionarTabla();
        
        
    }

    private void deleteCategoria(int idCategoria){
       CategoriaJpaController categoriaJpaController = new CategoriaJpaController();
       try{
           categoriaJpaController.destroy(idCategoria);
       }catch(NonexistentEntityException ex){
           JOptionPane.showMessageDialog(null, "¡Error al eliminar categoria!");
            Logger.getLogger(GestionDeCategorias.class.getName()).log(Level.SEVERE, null, ex);
       }finally{
           categoriaJpaController.close();
       }
    }
    
    private void filaDeTablaSeleccionada(){
        System.out.println("Fila selecionada: "+this.tblCategorias.getSelectedRow());
        int filaSeleccionada = this.tblCategorias.getSelectedRow();
        if(filaSeleccionada >= 0){          
            
            int idCategoria = Integer.parseInt(this.tblCategorias.getValueAt(filaSeleccionada, 0).toString());
            String descripcionCategoria = this.tblCategorias.getValueAt(filaSeleccionada, 1).toString();
            int estadoCategoria = Integer.parseInt(this.tblCategorias.getValueAt(filaSeleccionada, 2).toString());
            
            this.txtDescripcion.setText(descripcionCategoria);
            
            this.categoriaActualizar = new Categoria();
            this.categoriaActualizar.setIdCategoria(idCategoria);
            this.categoriaActualizar.setDescripcion(descripcionCategoria);
            this.categoriaActualizar.setEstado(estadoCategoria);
            
        }
    }
    
    private void eventoSeleccionarTabla(){
         // Agregar un ListSelectionListener a la tabla
        this.tblCategorias.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    filaDeTablaSeleccionada();
                }
            }
        });
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCrear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane scrollCategorias;
    private javax.swing.JTable tblCategorias;
    private javax.swing.JTextField txtDescripcion;
    // End of variables declaration//GEN-END:variables
}
