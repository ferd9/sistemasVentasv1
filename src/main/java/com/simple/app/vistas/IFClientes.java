/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.simple.app.vistas;

import com.simple.app.dao.ClienteJpaController;
import com.simple.app.dao.exceptions.NonexistentEntityException;
import com.simple.app.modelo.Cliente;
import com.simple.app.vistas.custom.DeleteCellEditor;
import com.simple.app.vistas.custom.TableDeleteActionCellRender;
import com.simple.app.vistas.interfaces.TableActionEvent;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lynkos
 */
public class IFClientes extends javax.swing.JInternalFrame {

    /**
     * Creates new form IFClientes
     */
    private Cliente clienteActualizar;
    public IFClientes() {
        initComponents();
        cargarTablaClientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtCedula = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        txtDireccion = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btnGrabar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();

        setClosable(true);
        setResizable(true);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Nombre:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel5.setText("Apellido:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel1.add(jLabel5, gridBagConstraints);

        jLabel3.setText("Cédula/DNI:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Dirección:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel2.setText("Teléfono:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel1.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 146;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel1.add(txtNombre, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 146;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel1.add(txtApellido, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 56;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel1.add(txtCedula, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 56;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel1.add(txtTelefono, gridBagConstraints);

        txtDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDireccionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 356;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel1.add(txtDireccion, gridBagConstraints);

        getContentPane().add(jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        btnGrabar.setText("Grabar");
        btnGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrabarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(btnGrabar, gridBagConstraints);

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(btnActualizar, gridBagConstraints);

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(btnLimpiar, gridBagConstraints);

        getContentPane().add(jPanel2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblClientes);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDireccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDireccionActionPerformed

    private void btnGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrabarActionPerformed
        if(this.clienteActualizar != null){
            return;
        }
        if(this.txtNombre.getText().isBlank() || !validarTexto(this.txtNombre.getText())){
             JOptionPane.showMessageDialog(null, "Ingerese un nombre valido.");
            return;
        }
        
        if(this.txtApellido.getText().isBlank() || !validarTexto(this.txtApellido.getText())){
             JOptionPane.showMessageDialog(null, "Ingerese un apellido valido.");
            return;
        }
        
        if(this.txtCedula.getText().isBlank() || !this.txtCedula.getText().matches("\\d{9}")){
             JOptionPane.showMessageDialog(null, "Ingerese una cedula/DNI valido.");
            return;
        }
        
        if(!this.txtTelefono.getText().isBlank() && !this.txtTelefono.getText().matches("\\d{9,15}")){
            JOptionPane.showMessageDialog(null, "Ingerese un número de telefono valido.");
            return;
        }
        
        if(this.txtDireccion.getText().isBlank()){
            JOptionPane.showMessageDialog(null, "Ingerese una direccion valida.");
            return;
        }
                
        
        ClienteJpaController clienteJpaController = new ClienteJpaController();
        
        if(clienteJpaController.findClienteByCedula(this.txtCedula.getText()) != null){
            JOptionPane.showMessageDialog(null, "Ya existe un cliente registrado con Cedula/DNI: "+txtCedula.getText());
            return;
        }
        
        clienteJpaController = new ClienteJpaController();
        Cliente cliente = new Cliente();
        cliente.setNombre(txtNombre.getText());
        cliente.setApellido(txtApellido.getText());
        cliente.setCedula(txtCedula.getText());
        cliente.setTelefono(txtTelefono.getText());
        cliente.setDireccion(txtDireccion.getText());
        clienteJpaController.create(cliente);
        if(cliente.getIdCliente() == null){
            JOptionPane.showMessageDialog(null, "Error no se registar al cliente.");            
            return;
        }
        JOptionPane.showMessageDialog(null, "Cliente registrado correctamente.");
        cargarTablaClientes();
    }//GEN-LAST:event_btnGrabarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        if(this.clienteActualizar == null){
            JOptionPane.showMessageDialog(null, "Seleccione un cliente de la tabla.");            
            return;
        }
        
        if (this.txtNombre.getText().isBlank() || !validarTexto(this.txtNombre.getText())) {
            JOptionPane.showMessageDialog(null, "Ingerese un nombre valido.");
            return;
        }

        if (this.txtApellido.getText().isBlank() || !validarTexto(this.txtApellido.getText())) {
            JOptionPane.showMessageDialog(null, "Ingerese un apellido valido.");
            return;
        }

        if (this.txtCedula.getText().isBlank() || !this.txtCedula.getText().matches("\\d{9}")) {
            JOptionPane.showMessageDialog(null, "Ingerese una cedula/DNI valido.");
            return;
        }

        if (!this.txtTelefono.getText().isBlank() && !this.txtTelefono.getText().matches("\\d{9,15}")) {
            JOptionPane.showMessageDialog(null, "Ingerese un número de telefono valido.");
            return;
        }
        
        if (this.txtDireccion.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Ingerese una direccion valida.");
            return;
        }
        
        this.clienteActualizar.setNombre(txtNombre.getText());
        this.clienteActualizar.setApellido(this.txtApellido.getText());
        this.clienteActualizar.setCedula(this.txtCedula.getText());
        this.clienteActualizar.setDireccion(this.txtDireccion.getText());
        this.clienteActualizar.setTelefono(this.txtTelefono.getText());
        
        ClienteJpaController clienteJpaController = new ClienteJpaController();
        try {
            clienteJpaController.edit(this.clienteActualizar); 
            this.clienteActualizar = null;
            this.cargarTablaClientes();
        } catch (Exception ex) {
            Logger.getLogger(IFClientes.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error: no se puedo realizar la actualizacion.");
        }finally{
            clienteJpaController.close();
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.txtNombre.setText("");
        this.txtApellido.setText("");
        this.txtCedula.setText("");
        this.txtTelefono.setText("");
        this.txtDireccion.setText("");
        this.cargarTablaClientes();
        this.clienteActualizar = null;
    }//GEN-LAST:event_btnLimpiarActionPerformed

    /**
     * Valida si que texto contenga letras y espacio. 
     * pero solo puede empezar con letras.
     * @param texto
     * @return 
     */
    private boolean validarTexto(String texto){
        return texto.matches("[a-zA-Z][a-zA-Z ]*");
    }

    public void cargarTablaClientes(){
        ClienteJpaController clienteJpaController = new ClienteJpaController();
        List<Cliente> listaClientes = clienteJpaController.findClienteEntities();
        
        DefaultTableModel defaultTableModel = new DefaultTableModel();
        this.tblClientes = new JTable(defaultTableModel);
        this.jScrollPane1.setViewportView(this.tblClientes);
        
        defaultTableModel.addColumn("idCliente");
        defaultTableModel.addColumn("Nombre");
        defaultTableModel.addColumn("Apellido");
        defaultTableModel.addColumn("Cedula/DNI");
        defaultTableModel.addColumn("Telefono");
        defaultTableModel.addColumn("Direccion");
        defaultTableModel.addColumn("Estado");
        defaultTableModel.addColumn("Accion");
        
        listaClientes.forEach((Cliente cliente) -> {
            
            Object fila[] = new Object[8];
            fila[0] = cliente.getIdCliente();
            fila[1] = cliente.getNombre();
            fila[2] = cliente.getApellido();
            fila[3] = cliente.getCedula();
            fila[4] = cliente.getTelefono();
            fila[5] = cliente.getDireccion();
            fila[6] = cliente.getEstado();

            defaultTableModel.addRow(fila);
            
        });
        clienteJpaController.close();
        
        
                TableActionEvent tableActionEvent = new TableActionEvent() {
            @Override
            public void onEdit(int row) {
                //sin inplementacion               
            }

            @Override
            public void onDelete(int row) {
                System.out.println(row);
                
                String[] options = { "Eliminar", "Cancelar"};
                int response = JOptionPane.showOptionDialog(null, "¿Esta seguro de eliminar el cliente seleccionado?", null, 
                                            JOptionPane.DEFAULT_OPTION, 
                                            JOptionPane.WARNING_MESSAGE, 
                                            null, options, null);
                if(response == 0){
                    int idCliente = (int) tblClientes.getModel().getValueAt(row, 0);
                   // eliminarUsuario(idUsuario);
                   deleteCliente(idCliente);
                    cargarTablaClientes();
                }
                
            }

            @Override
            public void onView(int row) {
                System.out.println(row);
            }
        };
        tblClientes.setRowHeight(35);
        tblClientes.getColumnModel().getColumn(7).setCellRenderer(new TableDeleteActionCellRender());
        tblClientes.getColumnModel().getColumn(7).setCellEditor(new DeleteCellEditor(tableActionEvent));
        eventoSeleccionarTabla();
        
    }
    
    private void deleteCliente(int idCliente){
        
        ClienteJpaController clienteJpaController = new ClienteJpaController();
        try {
            clienteJpaController.destroy(idCliente);
            this.clienteActualizar = null;
        } catch (NonexistentEntityException ex) {
            JOptionPane.showMessageDialog(null, "¡Error al eliminar cliente!");
            Logger.getLogger(IFClientes.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            clienteJpaController.close();
        }
    }
    
    private void filaDeTablaSeleccionada(){
        int filaSeleccionada = this.tblClientes.getSelectedRow();
        if(filaSeleccionada >= 0){
           String columnaId = this.tblClientes.getValueAt(filaSeleccionada, 0).toString();
           String columnaNombre = this.tblClientes.getValueAt(filaSeleccionada, 1).toString();
           String columnaApellido = this.tblClientes.getValueAt(filaSeleccionada, 2).toString();
           String columnaCedula = this.tblClientes.getValueAt(filaSeleccionada, 3).toString();
           String columnaTelefono = this.tblClientes.getValueAt(filaSeleccionada, 4).toString();
           String columnaDireccion = this.tblClientes.getValueAt(filaSeleccionada, 5).toString();
           String columnaEstado = this.tblClientes.getValueAt(filaSeleccionada, 6).toString();
           
           this.txtNombre.setText(columnaNombre);
           this.txtApellido.setText(columnaApellido);
           this.txtCedula.setText(columnaCedula);
           this.txtTelefono.setText(columnaTelefono);
           this.txtDireccion.setText(columnaDireccion);

           this.clienteActualizar = new Cliente();
           clienteActualizar.setIdCliente(Integer.parseInt(columnaId));
           clienteActualizar.setNombre(columnaNombre);
           clienteActualizar.setApellido(columnaApellido);
           clienteActualizar.setCedula(columnaCedula);
           clienteActualizar.setTelefono(columnaTelefono);
           clienteActualizar.setDireccion(columnaDireccion);
           clienteActualizar.setEstado(Integer.parseInt(columnaEstado));           
        }
    }
    
    private void eventoSeleccionarTabla() {
        // Agregar un ListSelectionListener a la tabla
        this.tblClientes.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    filaDeTablaSeleccionada();
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnGrabar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblClientes;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
